{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","placeholder","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","showAlert","console","log","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","length","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.cfdc02e5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=> {\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n   props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>  */}\r\n</div>\r\n  )\r\n}\r\n \r\nexport default Alert","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (  //for future reuse we make a generalised navbar here \r\n\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li>\r\n        */}\r\n      </ul>\r\n      <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>&nbsp;\r\n      </form>\r\n    </div>\r\n    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'white'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  id=\"flexSwitchCheckDefault\"/>  {/*role=\"switch\" */}\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable Dark mode</label>\r\n</div>\r\n  </div>\r\n</nav>\r\n    \r\n  )\r\n}\r\nNavbar.propTypes= {\r\n    title:PropTypes.string.isRequired, // if title is not string then isRequired gives an error\r\n    aboutText:PropTypes.string\r\n}\r\nNavbar.defaultProps={\r\n    title:'give title',\r\n    aboutText:'set about here'\r\n}","import React , {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=> {\r\n       // console.log(\"uppercase was clicked\");\r\n        let newtext=text.toUpperCase();\r\n        setText(newtext)\r\n        props.showAlert(\"converted to uppercase!\",\"success\");\r\n    }\r\n    \r\n    const handleloClick=()=> {\r\n        // console.log(\"uppercase was clicked\");\r\n         let newtext=text.toLowerCase();\r\n         setText(newtext)\r\n         props.showAlert(\"converted to lowercase!\",\"success\");\r\n     }\r\n\r\n     const clearOnClick=()=> {\r\n        // console.log(\"uppercase was clicked\");\r\n         let newtext=\"\"\r\n         setText(newtext)\r\n         props.showAlert(\"Text cleared!\",\"success\");\r\n     }\r\n\r\n    const handleOnChange=(event)=> {\r\n        //console.log(\"on change\")\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handlecopy=()=> {\r\n        console.log(\"i am copy\")\r\n        var text=document.getElementById(\"myBox\")\r\n        text.select();\r\n        text.setSelectionRange(0,9999);\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied to clipboard !\",\"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n    return ( \r\n    <>\r\n     <div className='container'  style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n       <h1>{props.heading}</h1> \r\n       <div className=\"mb-3\">\r\n         <textarea className=\"form-control\"  value={text} onChange={handleOnChange}\r\n         style={{backgroundColor: props.mode==='dark'?'grey':'white', color :props.mode==='dark'?'white':'#042743'}} \r\n          id=\"myBox\" rows=\"8\"> </textarea>\r\n</div>\r\n<button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to uppercase</button> &nbsp;\r\n<button className=\"btn btn-primary\" onClick={handleloClick}>Convert to lowercase</button> &nbsp;\r\n<button className=\"btn btn-primary  \" onClick={clearOnClick} >Clear Text</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handlecopy}>Copy Text</button>\r\n</div>\r\n<div className=\"container my-3\" style ={{color:props.mode==='dark'?'white':'#042743'}}>\r\n<h1>Your text summary</h1>\r\n<p>{text.split(\" \").length } words and {text.length} chararcters</p>\r\n<p>{0.008*text.split(\" \").length} minutes read left</p>\r\n</div>\r\n<div className=\"container my-3\" style ={{color:props.mode==='dark'?'white':'black'}}>\r\n<h2>Preview</h2>\r\n<p >{text.length>0?text:\"Enter something to preview it here\"}</p>\r\n</div>\r\n </> \r\n )\r\n}\r\n","//import logo from './logo.svg';\nimport React ,{ useState} from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const[mode,setMode]=useState('light');\n\n  const [alert,setAlert]=useState(null);\n\n  const showAlert= (message,type) => {\n         setAlert ({\n          msg : message,\n          type : type \n        } )\n        setTimeout(() => {\n          setAlert(null)\n        }, 2000);\n  }\n\n  const toggleMode=()=>{\n     if(mode==='light') {\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.title=\"TextUtils-Dark Mode\";\n     }\n     else {\n      setMode('light')\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n      document.title=\"TextUtils-Light Mode\";\n     }\n  }\n\n\n  return (\n    <>\n    {/* <BrowserRouter> */}\n      <Navbar   mode={mode} title=\"TextUtils\" aboutText=\"About\" toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\" >\n        {/* <Routes>\n          <Route exact path=\"/about\" element={<About />}/> */}\n          {/* <Route exact path=\"/\" element={} */}\n          <TextForm  showAlert={showAlert} mode={mode} heading=\"Enter the text to analyze below\"/>\n        {/* exact helps in exact matching of paths bcoz react do partia; matching */}\n        {/* </Routes> */}\n      </div>\n    {/* </BrowserRouter>   */}\n  </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}